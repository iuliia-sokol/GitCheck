{"mappings":"AAEaA,KAAKC,MAAlB,MAGaC,EAAQ,CACnBC,WAAY,KACZC,MAAMC,GACJC,KAAKH,WAAaI,aAAY,KAC5B,MAEMC,EAFcR,KAAKC,MAEOI,GAC1BI,MAAEA,EAAKC,OAAEA,EAAMC,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,GAqBnD,SAAmBC,GACjB,IAAID,EAAUE,KAAKC,MAAMF,EAAK,KAC5BF,EAAUG,KAAKC,MAAMH,EAAU,IAC/BF,EAAQI,KAAKC,MAAMJ,EAAU,IAC7BF,EAAOK,KAAKC,MAAML,EAAQ,IAC1BF,EAASM,KAAKC,MAAMN,EAAO,IAC3BF,EAAQO,KAAKC,MAAMN,EAAO,KAS5B,OAPAG,EAAUI,EAAgBJ,GAAW,IACrCD,EAAUK,EAAgBL,GAAW,IACrCD,EAAQM,EAAgBN,GAAS,IACjCD,EAAOO,EAAgBP,GAAQ,IAC/BD,EAASQ,EAAgBR,GAAU,IACnCD,EAAQS,EAAeT,GAEhB,C,MAAEA,E,OAAOC,E,KAAQC,E,MAAMC,E,QAAOC,E,QAASC,E,CAnCxCK,CAAUX,GACRA,GAAa,KACfF,KAAKc,OAEPC,EAAKZ,MAAMa,YAAc,GAAGb,IAC5BY,EAAKX,OAAOY,YAAc,GAAGZ,IAC7BW,EAAKV,KAAKW,YAAc,GAAGX,IAC3BU,EAAKT,MAAMU,YAAc,GAAGV,IAC5BS,EAAKR,QAAQS,YAAc,GAAGT,IAC9BQ,EAAKP,QAAQQ,YAAc,GAAGR,GAAS,GACtC,I,EAGLM,OACEG,cAAcjB,KAAKH,W,GAwBvB,SAASe,EAAeM,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CChD5B,SAASC,EAAUC,GAOxB,IAAIC,EAAO,CACTC,MAAO,GACPC,MAAOH,GAGTI,MAXY,gCAAgCJ,IAWjC,CAAEK,QAVG,CACdC,OAAQ,oCAUPC,MAAKC,GAAKA,EAAEC,SACZF,MAAKG,IACJT,EAAO,IAAKA,KAASS,GACrBjB,EAAKkB,QAAQC,UAAUC,OAAO,mBAC9B,MAAMC,EAAO1C,KAAK2C,MAAML,EAAKM,YAG7B,OAFA1C,EAAME,MAAMsC,GACZG,QAAQC,IAAIjB,GACLA,CAAI,IA2FZkB,OAAMC,GAAMH,QAAQI,MAAMD,I,CC/GxB,MAAM3B,EAAO,CAClB6B,KAAMC,SAASC,cAAc,SAC7Bb,QAASY,SAASC,cAAc,YAChCC,KAAMF,SAASC,cAAc,eAC7BE,KAAMH,SAASC,cAAc,eAC7BG,OAAQJ,SAASC,cAAc,iBAC/BI,SAAUL,SAASC,cAAc,mBACjCK,UAAWN,SAASC,cAAc,oBAClCM,UAAWP,SAASC,cAAc,oBAClC3C,MAAO0C,SAASC,cAAc,gBAC9B1C,OAAQyC,SAASC,cAAc,iBAC/BzC,KAAMwC,SAASC,cAAc,eAC7BxC,MAAOuC,SAASC,cAAc,gBAC9BvC,QAASsC,SAASC,cAAc,kBAChCtC,QAASqC,SAASC,cAAc,kBAChCtB,MAAOqB,SAASC,cAAc,iBAGhC/B,EAAK6B,KAAKS,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMjC,EAAcgC,EAAME,cAAcC,SAASC,MAAMxC,MAGvDH,EAAKkB,QAAQC,UAAUyB,OAAO,mBAC9BtC,EAAUC,GACVP,EAAK6B,KAAKgB,O","sources":["src/js/timer.js","src/js/fetch.js","src/js/searchByInput.js"],"sourcesContent":["import { refs } from './searchByInput';\n\nconst date = Date.now();\nlet setDate = {};\n\nexport const timer = {\n  intervalID: null,\n  start(startTimer) {\n    this.intervalID = setInterval(() => {\n      const currentTime = Date.now();\n      // console.log(currentTime);\n      const deltaTime = currentTime - startTimer;\n      const { years, months, days, hours, minutes, seconds } =\n        convertMs(deltaTime);\n      if (deltaTime <= 1000) {\n        this.stop();\n      }\n      refs.years.textContent = `${years}`;\n      refs.months.textContent = `${months}`;\n      refs.days.textContent = `${days}`;\n      refs.hours.textContent = `${hours}`;\n      refs.minutes.textContent = `${minutes}`;\n      refs.seconds.textContent = `${seconds}`;\n    }, 1000);\n  },\n\n  stop() {\n    clearInterval(this.intervalID);\n\n    return;\n  },\n};\n\nfunction convertMs(ms) {\n  let seconds = Math.floor(ms / 1000),\n    minutes = Math.floor(seconds / 60),\n    hours = Math.floor(minutes / 60),\n    days = Math.floor(hours / 24),\n    months = Math.floor(days / 30),\n    years = Math.floor(days / 365);\n\n  seconds = addLeadingZero((seconds %= 60));\n  minutes = addLeadingZero((minutes %= 60));\n  hours = addLeadingZero((hours %= 24));\n  days = addLeadingZero((days %= 30));\n  months = addLeadingZero((months %= 12));\n  years = addLeadingZero(years);\n\n  return { years, months, days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n","// import { key } from './hide/key';\nimport { refs } from './searchByInput';\nimport { timer } from './timer';\n\nexport function fetchData(searchQuery) {\n  const url = `https://api.github.com/users/${searchQuery}`;\n  const headers = {\n    Accept: 'application/vnd.github.v3+json',\n    // Authorization: `token ${key}`,\n  };\n\n  let user = {\n    repos: [],\n    login: searchQuery,\n  };\n\n  fetch(url, { headers: headers })\n    .then(r => r.json())\n    .then(data => {\n      user = { ...user, ...data };\n      refs.spinner.classList.toggle('visually-hidden');\n      const date = Date.parse(data.created_at);\n      timer.start(date);\n      console.log(user);\n      return user;\n    })\n\n    // GET REPOS\n\n    // .then(user => {\n    //        console.log(user);\n    //        console.log(repos);\n    //   fetch(`${user.repos_url}?per_page=100`, { headers: headers })\n    //     .then(r => r.json())\n    //     .then(repos => {\n    //       console.log(user);\n    //       console.log(repos);\n    //       user.repos = repos;\n    //       return repos;\n    //     });\n\n    // TO GET COMMITS\n\n    // .then(repos => {\n    //   console.log(user);\n    //   for (let repo of repos) {\n    //     let url = `${repo.url}/commits?per_page=100`;\n    //     fetch(url, { headers: headers })\n    //       .then(r => r.json())\n    //       .then(commit => {\n    //         let filteredData = [];\n    //         commit.forEach(com => {\n    //           // console.log(com.commit);\n    //           // console.log(com.author.login);\n    //           // console.log(user.id);\n    //           if (com.author == null) {\n    //             return;\n    //           }\n\n    //           if (\n    //             com.author.id === user.id ||\n    //             com.author.login === user.login ||\n    //             com.commit.author.login === user.login ||\n    //             com.commit.author.name === user.name ||\n    //             com.commit.author.email === user.email\n    //           ) {\n    //             // console.log(com.author.login);\n\n    //             filteredData.push(com);\n    //             return filteredData;\n    //           }\n\n    //           return;\n    //         });\n    //         repo.commits = [...filteredData];\n    //         return commit;\n    //       })\n    //       .then(commit => {\n    //         if (commit.length >= 100) {\n    //           for (let i = 1; i < 571; i++) {\n    //             let url = `${repo.url}/commits?per_page=100?page=${i + 1}`;\n    //             fetch(url, { headers: headers })\n    //               .then(r => r.json())\n    //               .then(commit => {\n    //                 let filteredData = [];\n    //                 commit.forEach(com => {\n    //                   // if (com.author == null) {\n    //                   //   return;\n    //                   // }\n\n    //                   if (\n    //                     com.author.id === user.id ||\n    //                     com.author.login === user.login ||\n    //                     com.commit.author.login === user.login ||\n    //                     com.commit.author.name === user.name ||\n    //                     com.commit.author.email === user.email\n    //                   ) {\n    //                     // console.log(com.author.login);\n    //                     filteredData.push(com);\n    //                     return filteredData;\n    //                   }\n    //                   return filteredData;\n    //                 });\n    //                 repo.commits = [...repo.commits, ...filteredData];\n    //                 // console.log(repo.commits);\n    //                 return commit;\n    //               });\n    //             return;\n    //           }\n    //         }\n    //       });\n    //   }\n    // });\n\n    // })\n    .catch(er => console.error(er));\n}\n","// import { Tooltip as Tooltip, Toast as Toast, Popover as Popover } from 'bootstrap';\n\nimport { fetchData } from './fetch';\n\nexport const refs = {\n  form: document.querySelector('.form'),\n  spinner: document.querySelector('.spinner'),\n  nick: document.querySelector('[data-nick]'),\n  name: document.querySelector('[data-name]'),\n  status: document.querySelector('[data-status]'),\n  location: document.querySelector('[data-location]'),\n  following: document.querySelector('[data-following]'),\n  followers: document.querySelector('[data-followers]'),\n  years: document.querySelector('[data-years]'),\n  months: document.querySelector('[data-months]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n  repos: document.querySelector('[data-repos]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const searchQuery = event.currentTarget.elements.input.value;\n  // timer.start();\n  // console.dir(refs.spinner);\n  refs.spinner.classList.remove('visually-hidden');\n  fetchData(searchQuery);\n  refs.form.reset();\n}\n"],"names":["Date","now","$7e81353768b819eb$export$9dc4ecf953986f04","intervalID","start","startTimer","this","setInterval","deltaTime","years","months","days","hours","minutes","seconds","ms","Math","floor","$7e81353768b819eb$var$addLeadingZero","$7e81353768b819eb$var$convertMs","stop","$7c6e49fc3e67d0d6$export$21666b427502ea6d","textContent","clearInterval","value","String","padStart","$924b66e829bc1184$export$8134c072fddab6a5","searchQuery","user","repos","login","fetch","headers","Accept","then","r","json","data","spinner","classList","toggle","date","parse","created_at","console","log","catch","er","error","form","document","querySelector","nick","name","status","location","following","followers","addEventListener","event","preventDefault","currentTarget","elements","input","remove","reset"],"version":3,"file":"index.08ace3d6.js.map"}